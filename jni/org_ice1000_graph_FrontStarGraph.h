/* DO NOT EDIT THIS FILE - it is machine generated */
#include "org_ice1000_public_functions.h"
/* Header for class org_ice1000_graph_FrontStarGraph */

#ifndef _Included_org_ice1000_graph_FrontStarGraph
#define _Included_org_ice1000_graph_FrontStarGraph

#undef org_ice1000_graph_FrontStarGraph_INFINITY
#define org_ice1000_graph_FrontStarGraph_INFINITY 2139062143L

#undef org_ice1000_graph_FrontStarGraph_INFINITY_FILLING
#define org_ice1000_graph_FrontStarGraph_INFINITY_FILLING 127L

#ifdef __cplusplus
extern "C" {
#endif /// __cplusplus

/**
 * Class:     org_ice1000_graph_FrontStarGraph
 * Method:    spfa
 * Signature: ()[J
 */
JNIEXPORT jlongArray JNICALL Java_org_ice1000_graph_FrontStarGraph_spfa(
		JNIEnv *,
		jobject,
		jint,
		jlongArray,
		jlongArray,
		jlongArray,
		jlongArray,
		jint,
		jint
);

/**
 * Class:     org_ice1000_graph_FrontStarGraph
 * Method:    kruskal
 * Signature: ([J[J[J[J[JII)J
 */
JNIEXPORT jlong JNICALL Java_org_ice1000_graph_FrontStarGraph_kruskal(
		JNIEnv *,
		jobject,
		jlongArray,
		jlongArray,
		jlongArray,
		jlongArray,
		jlongArray,
		jint,
		jint
);

typedef struct FrontStarNode {
	jint value;
	jint to;
	jint from;

	FrontStarNode(const jint v, const jint t, const jint f) : value(v), to(t), from(f) {  }
	FrontStarNode() {  }
	~FrontStarNode() {  }

	/**
	 * set values of fields
	 */
	void setValue(const jint v, const jint t, const jint f) {
		value = v;
		from = f;
		to = t;
	}

	const bool operator<(const FrontStarNode &o) const {
		return value < o.value;
	}

	const bool operator==(const FrontStarNode &o) const {
		return value == o.value;
	}
} FrontStarNode;

#ifdef __cplusplus
}
#endif /// __cplusplus
#endif /// org_ice1000_graph_FrontStarGraph
